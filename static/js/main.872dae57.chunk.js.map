{"version":3,"sources":["component/post.js","component/pagination.js","App.js","serviceWorker.js","index.js"],"names":["PostBlog","posts","loading","className","map","post","key","id","title","Paginate","postPerpage","totalpost","changeNumber","currentPage","items","number","push","Pagination","Item","active","onClick","Math","ceil","App","useState","data","setData","useEffect","a","axios","get","res","fetchPost","indexOfLastpage","indexOfFirstpage","currentPosts","slice","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAceA,EAZE,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAChB,OADmC,EAAbC,QAEX,2CAGP,wBAAIC,UAAU,mBACTF,EAAMG,IAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKE,GAAIJ,UAAU,mBAAmBE,EAAKG,W,QCUrDC,EAhBE,SAAC,GAEd,IAFwE,IAAxDC,EAAuD,EAAvDA,YAAaC,EAA0C,EAA1CA,UAAWC,EAA+B,EAA/BA,aAAaC,EAAkB,EAAlBA,YACjDC,EAAQ,GAD2D,WAE9DC,GACLD,EAAME,KACF,kBAACC,EAAA,EAAWC,KAAZ,CAAiBZ,IAAKS,EAAQI,OAAQJ,IAASF,EAAaO,QAAS,kBAAIR,EAAaG,KACjFA,KAHJA,EAAS,EAAGA,GAAUM,KAAKC,KAAKX,EAAUD,GAAcK,IAAW,EAAnEA,GAOT,OACI,6BACI,kBAACE,EAAA,EAAD,KAAaH,K,mjBCwBVS,MAlCf,WAAgB,IAAD,EACUC,mBAAS,CAC9BnB,KAAK,GACLH,SAAQ,EACRW,YAAY,EACZH,YAAY,KALD,mBACNe,EADM,KACDC,EADC,KAQbC,oBAAU,YACO,sCAAG,4BAAAC,EAAA,4DAChBF,EAAQ,EAAD,GAAKD,EAAL,CAAUvB,SAAQ,KADT,SAEE2B,IAAMC,IAAI,8CAFZ,OAEVC,EAFU,OAGhBL,EAAQ,EAAD,GAAKD,EAAL,CAAUpB,KAAK0B,EAAIN,KAAKvB,SAAQ,KAHvB,yCAAH,qDAOf8B,IACA,IAEF,IAAMC,EAAkBR,EAAKZ,YAAcY,EAAKf,YAC1CwB,EAAmBD,EAAkBR,EAAKf,YAC1CyB,EAAeV,EAAKpB,KAAK+B,MAAMF,EAAiBD,GAItD,OACE,yBAAK9B,UAAU,kBACb,wBAAIA,UAAU,qBAAd,WACA,kBAAC,EAAD,CAAUF,MAAOkC,EAAcjC,QAASuB,EAAKvB,UAC7C,kBAAC,EAAD,CAAUQ,YAAae,EAAKf,YAAaC,UAAWc,EAAKpB,KAAKgC,OAAQzB,aANvD,SAACG,GAAD,OAAWW,EAAQ,EAAD,GAAKD,EAAL,CAAUZ,YAAYE,MAMyCF,YAAaY,EAAKZ,gBCrBpGyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.872dae57.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PostBlog = ({ posts,loading }) =>{\r\n    if (loading) {\r\n        return <h1>Loading....</h1>\r\n    }\r\n    return (\r\n        <ul className=\"list-group mb-4\">\r\n            {posts.map(post=>\r\n                <li key={post.id} className='list-group-item'>{post.title}</li>\r\n            )}\r\n        </ul>\r\n    )\r\n}\r\nexport default PostBlog","import React from \"react\";\r\nimport { Pagination } from \"react-bootstrap\";\r\n\r\nconst Paginate = ({ postPerpage, totalpost, changeNumber,currentPage }) => {\r\n    let items = [];\r\n    for (let number = 1; number <= Math.ceil(totalpost/postPerpage); number++) {\r\n        items.push(\r\n            <Pagination.Item key={number} active={number===currentPage} onClick={()=>changeNumber(number)}>\r\n                {number}\r\n            </Pagination.Item>,\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            <Pagination>{items}</Pagination>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginate;","import React,{useState,useEffect} from 'react';\nimport axios from \"axios\";\nimport PostBlog from \"./component/post\";\nimport Paginate from \"./component/pagination\";\nfunction App() {\n  const [data,setData] = useState({\n    post:[],\n    loading:false,\n    currentPage:1,\n    postPerpage:10\n  });\n\n  useEffect(()=>{\n    const fetchPost = async () =>{\n      setData({...data,loading:true})\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts')\n      setData({...data,post:res.data,loading:false})\n      \n      \n    }\n    fetchPost()\n  },[])\n\n  const indexOfLastpage = data.currentPage * data.postPerpage\n  const indexOfFirstpage = indexOfLastpage - data.postPerpage\n  const currentPosts = data.post.slice(indexOfFirstpage,indexOfLastpage)\n\n  const handlePage = (number) =>setData({...data,currentPage:number})\n\n  return (\n    <div className=\"container mt-5\">\n      <h1 className=\"text-primary mb-3\">My Blog</h1>\n      <PostBlog posts={currentPosts} loading={data.loading} />\n      <Paginate postPerpage={data.postPerpage} totalpost={data.post.length} changeNumber={handlePage} currentPage={data.currentPage} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}